import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from django.conf import settings
from django.utils import timezone
from asgiref.sync import sync_to_async
from barber_app.models import CustomUser, UserSession


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBotService:
    def __init__(self):
        self.application = None

    def setup_bot(self):
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()

        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_language_choice, pattern="^lang_"))

        return self.application

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user = update.effective_user
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

            await self.save_or_update_user(user)

            await self.show_language_selection(update)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def show_language_selection(self, update: Update):
        keyboard = [
            [
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
                InlineKeyboardButton("üá∫üáø O'zbek", callback_data="lang_uz")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_message = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è."
        )

        await update.message.reply_text(
            text=welcome_message,
            reply_markup=reply_markup
        )

    async def handle_language_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            await query.answer()

            user = update.effective_user
            language_code = query.data.split("_")[1]

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {language_code}")

            await self.update_user_language(user.id, language_code)

            context.user_data['language'] = language_code

            messages = {
                'ru': {
                    'success': "‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π!\n\n"
                               "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
                    'menu': "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    'settings': "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                },
                'uz': {
                    'success': "‚úÖ Til muvaffaqiyatli o'zbek tiliga o'rnatildi!\n\n"
                               "Endi siz botdan o'zbek tilida foydalanishingiz mumkin.",
                    'menu': "üìã Asosiy menyu",
                    'settings': "‚öôÔ∏è Sozlamalar"
                }
            }

            lang_messages = messages.get(language_code, messages['ru'])

            keyboard = [
                [InlineKeyboardButton(lang_messages['menu'], callback_data="main_menu")],
                [InlineKeyboardButton(lang_messages['settings'], callback_data="settings")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                text=lang_messages['success'],
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_language_choice: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    @sync_to_async
    def save_or_update_user(self, user):
        try:
            db_user, created = CustomUser.objects.get_or_create(
                telegram_id=user.id,
                defaults={
                    'username': user.username,
                }
            )

            if not created:
                db_user.username = user.username
                db_user.last_activity = timezone.now()
                db_user.save()

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'—Å–æ–∑–¥–∞–Ω' if created else '–æ–±–Ω–æ–≤–ª–µ–Ω'}: {user.id}")
            return db_user

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    @sync_to_async
    def get_user_from_db(self, telegram_id):
        try:
            return CustomUser.objects.get(telegram_id=telegram_id)
        except CustomUser.DoesNotExist:
            return None

    @sync_to_async
    def update_user_language(self, telegram_id, language):
        try:
            user = CustomUser.objects.get(telegram_id=telegram_id)
            user.language = language
            user.last_activity = timezone.now()
            user.save()
            logger.info(f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {language}")
        except CustomUser.DoesNotExist:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def run_bot(self):
        if self.application:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            self.application.run_polling(drop_pending_updates=True)
        else:
            logger.error("–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ setup_bot() —Å–Ω–∞—á–∞–ª–∞.")


telegram_service = TelegramBotService()